#pragma once

#include <common/stuff.hpp>

//
// Сообщения, которые необходимы для взаимодействия IO-агента с внешним миром.
//

// Запрос на загрузку содержимого файла.
struct load_email_request
{
  // Имя файла для загрузки.
  string email_file_;
  // Куда нужно прислать результат.
  mbox_t reply_to_;
};

// Успешный результат загрузки файла.
struct load_email_successed
{
  // Содержимое файла.
  string content_;
};

// Неудачный результат загрузки файла.
struct load_email_failed
{
  // Описание причины неудачи.
  string what_;
};

//
// Сам IO-агент.
//
// Реальный IO-агент наверняка будет использовать асинхронный IO, но для
// целей демонстрации используем простую схему имитации асинхронного IO:
// на каждый запрос отсылаем ответ с некоторой задержкой. Это позволит
// нам имитировать паузы в загрузки содержимого файла, но сам IO-агент
// сможет работать на дефолтном диспетчере не приостанавливая рабочую
// нить этого диспетчера.
//
// Поскольку имитатор IO-агента оказывается очень простым, то не будем
// создавать для него отдельный класс агента, а воспользуемся возможностью
// регистрации т.н. ad-hoc агентов.
//
// Заодно продемонстрируем еще один способ создания, наполнения и
// регистрации коопераций, который не использует вспомогательных функций
// introduce_coop и introduce_child_coop.
//
void make_io_agent( environment_t & env ) {
  // IO-агент будет жить в своей собственной кооперации.
  // Каждая кооперация должна иметь свое уникальное имя, но можно
  // попросить SObjectizer Environment создать это имя самостоятельно.
  auto coop = env.create_coop( so_5::autoname );

  // Для взаимодействия с внешним миром IO-агент будет использовать
  // именованный mbox.
  auto mbox = env.create_mbox( "io_agent" );

  // Теперь можно создать IO-агента, который принадлежит новой кооперации и
  // обрабатывает единственное сообщение, приходящее с именованного mbox-а.
  coop->define_agent().event( mbox, [&env]( const load_email_request & msg ) {
    // Отсылка ответа с задержкой и будет имитацией асинхронной IO-операции.
    send_delayed< load_email_successed >(
        env,
        msg.reply_to_,
        chrono::milliseconds( msg.email_file_.length() * 10 ),
        string() );
  } );

  // Осталось зарегистрировать кооперацию с IO-агентом.
  env.register_coop( move(coop) );
}

